/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    users: User;
    messageFromGuests: MessageFromGuest;
    messageFieldConfiguration: MessageFieldConfiguration;
    groupPage: GroupPage;
    mediaHero: MediaHero;
    mediaServices: MediaService;
    mediaLoopingCarousel: MediaLoopingCarousel;
    mediaIllustrationWithCarousel: MediaIllustrationWithCarousel;
    mediaQuadGrid: MediaQuadGrid;
    mediaGridCarousel: MediaGridCarousel;
    mediaContact: MediaContact;
    mediaIllustrationWithTextAndCarousel: MediaIllustrationWithTextAndCarousel;
    mediaImageHeaderParagraph: MediaImageHeaderParagraph;
    mediaImageHeaderThreeColumn: MediaImageHeaderThreeColumn;
    mediaCircleImageGrid: MediaCircleImageGrid;
    mediaTextWithImageCluster: MediaTextWithImageCluster;
    mediaTwoListWithIllustration: MediaTwoListWithIllustration;
    mediaCardWithImage: MediaCardWithImage;
    mediaListWithIconAndDescription: MediaListWithIconAndDescription;
    mediaThreeDimensionCarousel: MediaThreeDimensionCarousel;
    mediaHero2: MediaHero2;
    mediaIconTextListWithImage: MediaIconTextListWithImage;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    messageFromGuests: MessageFromGuestsSelect<false> | MessageFromGuestsSelect<true>;
    messageFieldConfiguration: MessageFieldConfigurationSelect<false> | MessageFieldConfigurationSelect<true>;
    groupPage: GroupPageSelect<false> | GroupPageSelect<true>;
    mediaHero: MediaHeroSelect<false> | MediaHeroSelect<true>;
    mediaServices: MediaServicesSelect<false> | MediaServicesSelect<true>;
    mediaLoopingCarousel: MediaLoopingCarouselSelect<false> | MediaLoopingCarouselSelect<true>;
    mediaIllustrationWithCarousel: MediaIllustrationWithCarouselSelect<false> | MediaIllustrationWithCarouselSelect<true>;
    mediaQuadGrid: MediaQuadGridSelect<false> | MediaQuadGridSelect<true>;
    mediaGridCarousel: MediaGridCarouselSelect<false> | MediaGridCarouselSelect<true>;
    mediaContact: MediaContactSelect<false> | MediaContactSelect<true>;
    mediaIllustrationWithTextAndCarousel: MediaIllustrationWithTextAndCarouselSelect<false> | MediaIllustrationWithTextAndCarouselSelect<true>;
    mediaImageHeaderParagraph: MediaImageHeaderParagraphSelect<false> | MediaImageHeaderParagraphSelect<true>;
    mediaImageHeaderThreeColumn: MediaImageHeaderThreeColumnSelect<false> | MediaImageHeaderThreeColumnSelect<true>;
    mediaCircleImageGrid: MediaCircleImageGridSelect<false> | MediaCircleImageGridSelect<true>;
    mediaTextWithImageCluster: MediaTextWithImageClusterSelect<false> | MediaTextWithImageClusterSelect<true>;
    mediaTwoListWithIllustration: MediaTwoListWithIllustrationSelect<false> | MediaTwoListWithIllustrationSelect<true>;
    mediaCardWithImage: MediaCardWithImageSelect<false> | MediaCardWithImageSelect<true>;
    mediaListWithIconAndDescription: MediaListWithIconAndDescriptionSelect<false> | MediaListWithIconAndDescriptionSelect<true>;
    mediaThreeDimensionCarousel: MediaThreeDimensionCarouselSelect<false> | MediaThreeDimensionCarouselSelect<true>;
    mediaHero2: MediaHero2Select<false> | MediaHero2Select<true>;
    mediaIconTextListWithImage: MediaIconTextListWithImageSelect<false> | MediaIconTextListWithImageSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  pageName: string;
  /**
   * Enable if this page will be located at "https:{domain}/" (make sure there is no other page as the default page)
   */
  pageDefault?: boolean | null;
  pageKey?: string | null;
  /**
   * Example: https://{domain}/{Group}/{This Page}
   */
  pageGroup?: (number | null) | GroupPage;
  pageSection?:
    | (
        | HeroSection
        | ZigZagListsSection
        | IllustrationWithCarouselSection
        | QuadGridSection
        | GridCarouselSection
        | ContactSection
        | IllustrationWithTextAndCarouselSection
        | ImageHeaderParagraphSection
        | ImageHeaderThreeColumnSection
        | CircleImageGridSection
        | TextWithImageClusterSection
        | LoopingCarouselSection
        | ListWithIconSection
        | ListWithIconAndDescriptionSection
        | TwoListWithIllustrationSection
        | TextGridSection
        | CardWithImageSection
        | IconTextListWithImageSection
        | DCarouselSection
        | Hero2Section
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groupPage".
 */
export interface GroupPage {
  id: number;
  groupName: string;
  groupKey?: string | null;
  subGroupFrom?: (number | null) | GroupPage;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero Section".
 */
export interface HeroSection {
  greetingIllustrationLeft: number | MediaHero;
  greetingIllustrationRight: number | MediaHero;
  greetings: {
    hasIncludeImage?: boolean | null;
    imageGreeting?: (number | null) | MediaHero;
    textGreeting: string;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaHero".
 */
export interface MediaHero {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Zig Zag Lists Section".
 */
export interface ZigZagListsSection {
  sectionTitle: string;
  sectionSubtitle: string;
  contentLists: {
    contentListTitle: string;
    contentListDescription: string;
    contentListIcon: number | MediaService;
    /**
     * Select the page that explains about this service (make sure the page already exists)
     */
    contentReferencePage?: (number | null) | Page;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'zigZagListSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaServices".
 */
export interface MediaService {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Illustration With Carousel Section".
 */
export interface IllustrationWithCarouselSection {
  sectionTitle: string;
  sectionSubtitle: string;
  sectionIllustration: number | MediaIllustrationWithCarousel;
  carouselLists: {
    itemName: string;
    itemIcon: number | MediaIllustrationWithCarousel;
    id?: string | null;
  }[];
  backgroundColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'illustrationWithCarouselSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaIllustrationWithCarousel".
 */
export interface MediaIllustrationWithCarousel {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Quad Grid Section".
 */
export interface QuadGridSection {
  sectionTitle: string;
  sectionSubtitle: string;
  gridLists: {
    itemTitle: string;
    itemImage: number | MediaQuadGrid;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'quadGridSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaQuadGrid".
 */
export interface MediaQuadGrid {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Grid Carousel Section".
 */
export interface GridCarouselSection {
  sectionTitle: string;
  gridLists: {
    itemName: string;
    itemImage: number | GroupPage;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'gridCarouselSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Contact Section".
 */
export interface ContactSection {
  sectionContactIllustration: number | MediaContact;
  sectionContactLabel: string;
  sectionContactHeadline: string;
  sectionContactDescription: string;
  fieldContactLists: {
    fieldLabel: number | MessageFieldConfiguration;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'contactSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaContact".
 */
export interface MediaContact {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messageFieldConfiguration".
 */
export interface MessageFieldConfiguration {
  id: number;
  computedTitle?: string | null;
  /**
   * For show on frontend
   */
  fieldLabel: string;
  fieldName: string;
  fieldPlaceholder?: string | null;
  fieldType: 'text' | 'email' | 'number' | 'textarea' | 'select';
  selectOptions?:
    | {
        /**
         * For show on frontend
         */
        optionLabel: string;
        optionValue: string;
        id?: string | null;
      }[]
    | null;
  /**
   * By enabling styling, can make the current field into 2 input columns in one row
   */
  styling?: boolean | null;
  /**
   * For show on frontend
   */
  parallelFieldLabel?: string | null;
  parallelFieldName?: string | null;
  parallelFieldPlaceholder?: string | null;
  parallelFieldType?: ('text' | 'email' | 'number') | null;
  /**
   * By enabling required, can make the current field mandatory on the frontend.
   */
  required?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Illustration With Text and Carousel Section".
 */
export interface IllustrationWithTextAndCarouselSection {
  sectionTitle: string;
  sectionDescription: string;
  carouselLists: {
    carouselImage: number | MediaIllustrationWithTextAndCarousel;
    carouselDescription: string;
    carouselTitle: string;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'illustrationWithTextAndCarouselSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaIllustrationWithTextAndCarousel".
 */
export interface MediaIllustrationWithTextAndCarousel {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Image Header Paragraph Section".
 */
export interface ImageHeaderParagraphSection {
  sectionImage: number | MediaImageHeaderParagraph;
  sectionTitle: string;
  sectionParagraph: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageHeaderParagraphSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaImageHeaderParagraph".
 */
export interface MediaImageHeaderParagraph {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Image Header Three Column Section".
 */
export interface ImageHeaderThreeColumnSection {
  sectionHeaderImage: number | MediaImageHeaderThreeColumn;
  sectionTitle: string;
  sectionSubtitle: string;
  /**
   * Add 3 Grid
   */
  gridLists?:
    | {
        itemTitle: string;
        itemDescription: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageHeaderThreeColumnSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaImageHeaderThreeColumn".
 */
export interface MediaImageHeaderThreeColumn {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Circle Image Grid Section".
 */
export interface CircleImageGridSection {
  sectionTitle: string;
  gridLists?:
    | {
        itemImage: number | MediaCircleImageGrid;
        itemName: string;
        itemDescription: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'circleImageGridSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCircleImageGrid".
 */
export interface MediaCircleImageGrid {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Text With Image Cluster Section".
 */
export interface TextWithImageClusterSection {
  /**
   * Max 3 image
   */
  imageLists: {
    itemImage: number | MediaTextWithImageCluster;
    id?: string | null;
  }[];
  sectionHeadline?: string | null;
  sectionTitle: string;
  sectionDescription: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  hasButton?: boolean | null;
  buttonText?: string | null;
  buttonIcon?: string | null;
  buttonLink?: (number | null) | Page;
  /**
   * Choose a color for this button
   */
  buttonColor?: string | null;
  reverseContent?: boolean | null;
  hasBackground?: boolean | null;
  /**
   * Choose a color for this background page
   */
  backgroundColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textWithImageClusterSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaTextWithImageCluster".
 */
export interface MediaTextWithImageCluster {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Looping Carousel Section".
 */
export interface LoopingCarouselSection {
  sectionTitle: string;
  carouselLists: {
    itemImage: number | MediaLoopingCarousel;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'loopingCarouselSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaLoopingCarousel".
 */
export interface MediaLoopingCarousel {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "List With Icon Section".
 */
export interface ListWithIconSection {
  sectionTitle: string;
  /**
   * Choose a color for this background page
   */
  backgroundPageColor?: string | null;
  contentLists: {
    contentIcon: string;
    contentName: string;
    id?: string | null;
  }[];
  /**
   * Choose a color for this icon
   */
  iconColor?: string | null;
  /**
   * Choose a color for this background icon
   */
  backgroundIconColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'listWithIconSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "List With Icon and Description Section".
 */
export interface ListWithIconAndDescriptionSection {
  sectionTitle: string;
  /**
   * Choose a color for this background page
   */
  backgroundPageColor?: string | null;
  contentLists: {
    contentIcon: string;
    contentName: string;
    contentDesc: string;
    id?: string | null;
  }[];
  /**
   * Choose a color for this icon
   */
  iconColor?: string | null;
  /**
   * Choose a color for this background icon
   */
  backgroundIconColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'listWithIconDescSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Two List With Illustration Section".
 */
export interface TwoListWithIllustrationSection {
  sectionTitle: string;
  sectionDescription: string;
  sectionIllustration: number | MediaTwoListWithIllustration;
  leftSideListTitle: string;
  leftSideListTitleColor: string;
  leftSideListContentArray?:
    | {
        leftSideListContent: string;
        id?: string | null;
      }[]
    | null;
  leftSideListColor: string;
  rightSideListTitle: string;
  rightSideListTitleColor: string;
  rightSideListContentArray?:
    | {
        rightSideListContent: string;
        id?: string | null;
      }[]
    | null;
  rightSideListColor: string;
  hasButton?: boolean | null;
  buttonText?: string | null;
  buttonIcon?: string | null;
  buttonLink?: (number | null) | Page;
  /**
   * Choose a color for this button
   */
  buttonColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'twoListWithIllustrationSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaTwoListWithIllustration".
 */
export interface MediaTwoListWithIllustration {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Text Grid Section".
 */
export interface TextGridSection {
  sectionTitle: string;
  sectionDescription: string;
  headerColor: string;
  gridArray?:
    | {
        itemTitle: string;
        itemDescription: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textGridSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Card With Image Section".
 */
export interface CardWithImageSection {
  sectionTitle: string;
  headerColor: string;
  cardArray?:
    | {
        itemThumbnail: number | MediaCardWithImage;
        itemTitle: string;
        itemDescription: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cardWithImageSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCardWithImage".
 */
export interface MediaCardWithImage {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Icon Text List With Image Section".
 */
export interface IconTextListWithImageSection {
  sectionTitle: string;
  sectionIllustration: number | MediaIconTextListWithImage;
  contentLists: {
    itemIcon: string;
    itemTitle: string;
    itemDescription: string;
    id?: string | null;
  }[];
  /**
   * Choose a color for this icon
   */
  iconColor?: string | null;
  /**
   * Choose a color for this background icon
   */
  backgroundIconColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'iconTextListWithImageSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaIconTextListWithImage".
 */
export interface MediaIconTextListWithImage {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "3D Carousel Section".
 */
export interface DCarouselSection {
  sectionTitle?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Carousel items must be 3
   */
  carouselItems: {
    itemTitle: string;
    itemDescription: string;
    itemIcon: number | MediaThreeDimensionCarousel;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'threeDimensionCarouselSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaThreeDimensionCarousel".
 */
export interface MediaThreeDimensionCarousel {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero2 Section".
 */
export interface Hero2Section {
  sectionTextBold: string;
  sectionTextLight: string;
  sectionBackground: number | MediaHero2;
  id?: string | null;
  blockName?: string | null;
  blockType: 'hero2Section';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaHero2".
 */
export interface MediaHero2 {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messageFromGuests".
 */
export interface MessageFromGuest {
  id: number;
  /**
   * This will store guests message based on configured
   */
  messageGuests?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaGridCarousel".
 */
export interface MediaGridCarousel {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaListWithIconAndDescription".
 */
export interface MediaListWithIconAndDescription {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'messageFromGuests';
        value: number | MessageFromGuest;
      } | null)
    | ({
        relationTo: 'messageFieldConfiguration';
        value: number | MessageFieldConfiguration;
      } | null)
    | ({
        relationTo: 'groupPage';
        value: number | GroupPage;
      } | null)
    | ({
        relationTo: 'mediaHero';
        value: number | MediaHero;
      } | null)
    | ({
        relationTo: 'mediaServices';
        value: number | MediaService;
      } | null)
    | ({
        relationTo: 'mediaLoopingCarousel';
        value: number | MediaLoopingCarousel;
      } | null)
    | ({
        relationTo: 'mediaIllustrationWithCarousel';
        value: number | MediaIllustrationWithCarousel;
      } | null)
    | ({
        relationTo: 'mediaQuadGrid';
        value: number | MediaQuadGrid;
      } | null)
    | ({
        relationTo: 'mediaGridCarousel';
        value: number | MediaGridCarousel;
      } | null)
    | ({
        relationTo: 'mediaContact';
        value: number | MediaContact;
      } | null)
    | ({
        relationTo: 'mediaIllustrationWithTextAndCarousel';
        value: number | MediaIllustrationWithTextAndCarousel;
      } | null)
    | ({
        relationTo: 'mediaImageHeaderParagraph';
        value: number | MediaImageHeaderParagraph;
      } | null)
    | ({
        relationTo: 'mediaImageHeaderThreeColumn';
        value: number | MediaImageHeaderThreeColumn;
      } | null)
    | ({
        relationTo: 'mediaCircleImageGrid';
        value: number | MediaCircleImageGrid;
      } | null)
    | ({
        relationTo: 'mediaTextWithImageCluster';
        value: number | MediaTextWithImageCluster;
      } | null)
    | ({
        relationTo: 'mediaTwoListWithIllustration';
        value: number | MediaTwoListWithIllustration;
      } | null)
    | ({
        relationTo: 'mediaCardWithImage';
        value: number | MediaCardWithImage;
      } | null)
    | ({
        relationTo: 'mediaListWithIconAndDescription';
        value: number | MediaListWithIconAndDescription;
      } | null)
    | ({
        relationTo: 'mediaThreeDimensionCarousel';
        value: number | MediaThreeDimensionCarousel;
      } | null)
    | ({
        relationTo: 'mediaHero2';
        value: number | MediaHero2;
      } | null)
    | ({
        relationTo: 'mediaIconTextListWithImage';
        value: number | MediaIconTextListWithImage;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  pageName?: T;
  pageDefault?: T;
  pageKey?: T;
  pageGroup?: T;
  pageSection?:
    | T
    | {
        heroSection?: T | HeroSectionSelect<T>;
        zigZagListSection?: T | ZigZagListsSectionSelect<T>;
        illustrationWithCarouselSection?: T | IllustrationWithCarouselSectionSelect<T>;
        quadGridSection?: T | QuadGridSectionSelect<T>;
        gridCarouselSection?: T | GridCarouselSectionSelect<T>;
        contactSection?: T | ContactSectionSelect<T>;
        illustrationWithTextAndCarouselSection?: T | IllustrationWithTextAndCarouselSectionSelect<T>;
        imageHeaderParagraphSection?: T | ImageHeaderParagraphSectionSelect<T>;
        imageHeaderThreeColumnSection?: T | ImageHeaderThreeColumnSectionSelect<T>;
        circleImageGridSection?: T | CircleImageGridSectionSelect<T>;
        textWithImageClusterSection?: T | TextWithImageClusterSectionSelect<T>;
        loopingCarouselSection?: T | LoopingCarouselSectionSelect<T>;
        listWithIconSection?: T | ListWithIconSectionSelect<T>;
        listWithIconDescSection?: T | ListWithIconAndDescriptionSectionSelect<T>;
        twoListWithIllustrationSection?: T | TwoListWithIllustrationSectionSelect<T>;
        textGridSection?: T | TextGridSectionSelect<T>;
        cardWithImageSection?: T | CardWithImageSectionSelect<T>;
        iconTextListWithImageSection?: T | IconTextListWithImageSectionSelect<T>;
        threeDimensionCarouselSection?: T | DCarouselSectionSelect<T>;
        hero2Section?: T | Hero2SectionSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero Section_select".
 */
export interface HeroSectionSelect {
  greetingIllustrationLeft?: boolean;
  greetingIllustrationRight?: boolean;
  greetings?:
    | boolean
    | {
        hasIncludeImage?: boolean;
        imageGreeting?: boolean;
        textGreeting?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Zig Zag Lists Section_select".
 */
export interface ZigZagListsSectionSelect {
  sectionTitle?: boolean;
  sectionSubtitle?: boolean;
  contentLists?:
    | boolean
    | {
        contentListTitle?: boolean;
        contentListDescription?: boolean;
        contentListIcon?: boolean;
        contentReferencePage?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Illustration With Carousel Section_select".
 */
export interface IllustrationWithCarouselSectionSelect {
  sectionTitle?: boolean;
  sectionSubtitle?: boolean;
  sectionIllustration?: boolean;
  carouselLists?:
    | boolean
    | {
        itemName?: boolean;
        itemIcon?: boolean;
        id?: boolean;
      };
  backgroundColor?: boolean;
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Quad Grid Section_select".
 */
export interface QuadGridSectionSelect {
  sectionTitle?: boolean;
  sectionSubtitle?: boolean;
  gridLists?:
    | boolean
    | {
        itemTitle?: boolean;
        itemImage?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Grid Carousel Section_select".
 */
export interface GridCarouselSectionSelect {
  sectionTitle?: boolean;
  gridLists?:
    | boolean
    | {
        itemName?: boolean;
        itemImage?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Contact Section_select".
 */
export interface ContactSectionSelect {
  sectionContactIllustration?: boolean;
  sectionContactLabel?: boolean;
  sectionContactHeadline?: boolean;
  sectionContactDescription?: boolean;
  fieldContactLists?:
    | boolean
    | {
        fieldLabel?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Illustration With Text and Carousel Section_select".
 */
export interface IllustrationWithTextAndCarouselSectionSelect {
  sectionTitle?: boolean;
  sectionDescription?: boolean;
  carouselLists?:
    | boolean
    | {
        carouselImage?: boolean;
        carouselDescription?: boolean;
        carouselTitle?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Image Header Paragraph Section_select".
 */
export interface ImageHeaderParagraphSectionSelect {
  sectionImage?: boolean;
  sectionTitle?: boolean;
  sectionParagraph?: boolean;
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Image Header Three Column Section_select".
 */
export interface ImageHeaderThreeColumnSectionSelect {
  sectionHeaderImage?: boolean;
  sectionTitle?: boolean;
  sectionSubtitle?: boolean;
  gridLists?:
    | boolean
    | {
        itemTitle?: boolean;
        itemDescription?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Circle Image Grid Section_select".
 */
export interface CircleImageGridSectionSelect {
  sectionTitle?: boolean;
  gridLists?:
    | boolean
    | {
        itemImage?: boolean;
        itemName?: boolean;
        itemDescription?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Text With Image Cluster Section_select".
 */
export interface TextWithImageClusterSectionSelect {
  imageLists?:
    | boolean
    | {
        itemImage?: boolean;
        id?: boolean;
      };
  sectionHeadline?: boolean;
  sectionTitle?: boolean;
  sectionDescription?: boolean;
  hasButton?: boolean;
  buttonText?: boolean;
  buttonIcon?: boolean;
  buttonLink?: boolean;
  buttonColor?: boolean;
  reverseContent?: boolean;
  hasBackground?: boolean;
  backgroundColor?: boolean;
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Looping Carousel Section_select".
 */
export interface LoopingCarouselSectionSelect {
  sectionTitle?: boolean;
  carouselLists?:
    | boolean
    | {
        itemImage?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "List With Icon Section_select".
 */
export interface ListWithIconSectionSelect {
  sectionTitle?: boolean;
  backgroundPageColor?: boolean;
  contentLists?:
    | boolean
    | {
        contentIcon?: boolean;
        contentName?: boolean;
        id?: boolean;
      };
  iconColor?: boolean;
  backgroundIconColor?: boolean;
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "List With Icon and Description Section_select".
 */
export interface ListWithIconAndDescriptionSectionSelect {
  sectionTitle?: boolean;
  backgroundPageColor?: boolean;
  contentLists?:
    | boolean
    | {
        contentIcon?: boolean;
        contentName?: boolean;
        contentDesc?: boolean;
        id?: boolean;
      };
  iconColor?: boolean;
  backgroundIconColor?: boolean;
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Two List With Illustration Section_select".
 */
export interface TwoListWithIllustrationSectionSelect {
  sectionTitle?: boolean;
  sectionDescription?: boolean;
  sectionIllustration?: boolean;
  leftSideListTitle?: boolean;
  leftSideListTitleColor?: boolean;
  leftSideListContentArray?:
    | boolean
    | {
        leftSideListContent?: boolean;
        id?: boolean;
      };
  leftSideListColor?: boolean;
  rightSideListTitle?: boolean;
  rightSideListTitleColor?: boolean;
  rightSideListContentArray?:
    | boolean
    | {
        rightSideListContent?: boolean;
        id?: boolean;
      };
  rightSideListColor?: boolean;
  hasButton?: boolean;
  buttonText?: boolean;
  buttonIcon?: boolean;
  buttonLink?: boolean;
  buttonColor?: boolean;
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Text Grid Section_select".
 */
export interface TextGridSectionSelect {
  sectionTitle?: boolean;
  sectionDescription?: boolean;
  headerColor?: boolean;
  gridArray?:
    | boolean
    | {
        itemTitle?: boolean;
        itemDescription?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Card With Image Section_select".
 */
export interface CardWithImageSectionSelect {
  sectionTitle?: boolean;
  headerColor?: boolean;
  cardArray?:
    | boolean
    | {
        itemThumbnail?: boolean;
        itemTitle?: boolean;
        itemDescription?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Icon Text List With Image Section_select".
 */
export interface IconTextListWithImageSectionSelect {
  sectionTitle?: boolean;
  sectionIllustration?: boolean;
  contentLists?:
    | boolean
    | {
        itemIcon?: boolean;
        itemTitle?: boolean;
        itemDescription?: boolean;
        id?: boolean;
      };
  iconColor?: boolean;
  backgroundIconColor?: boolean;
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "3D Carousel Section_select".
 */
export interface DCarouselSectionSelect {
  sectionTitle?: boolean;
  carouselItems?:
    | boolean
    | {
        itemTitle?: boolean;
        itemDescription?: boolean;
        itemIcon?: boolean;
        id?: boolean;
      };
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero2 Section_select".
 */
export interface Hero2SectionSelect {
  sectionTextBold?: boolean;
  sectionTextLight?: boolean;
  sectionBackground?: boolean;
  id?: boolean;
  blockName?: boolean;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messageFromGuests_select".
 */
export interface MessageFromGuestsSelect<T extends boolean = true> {
  messageGuests?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messageFieldConfiguration_select".
 */
export interface MessageFieldConfigurationSelect<T extends boolean = true> {
  computedTitle?: T;
  fieldLabel?: T;
  fieldName?: T;
  fieldPlaceholder?: T;
  fieldType?: T;
  selectOptions?:
    | T
    | {
        optionLabel?: T;
        optionValue?: T;
        id?: T;
      };
  styling?: T;
  parallelFieldLabel?: T;
  parallelFieldName?: T;
  parallelFieldPlaceholder?: T;
  parallelFieldType?: T;
  required?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groupPage_select".
 */
export interface GroupPageSelect<T extends boolean = true> {
  groupName?: T;
  groupKey?: T;
  subGroupFrom?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaHero_select".
 */
export interface MediaHeroSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaServices_select".
 */
export interface MediaServicesSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaLoopingCarousel_select".
 */
export interface MediaLoopingCarouselSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaIllustrationWithCarousel_select".
 */
export interface MediaIllustrationWithCarouselSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaQuadGrid_select".
 */
export interface MediaQuadGridSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaGridCarousel_select".
 */
export interface MediaGridCarouselSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaContact_select".
 */
export interface MediaContactSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaIllustrationWithTextAndCarousel_select".
 */
export interface MediaIllustrationWithTextAndCarouselSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaImageHeaderParagraph_select".
 */
export interface MediaImageHeaderParagraphSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaImageHeaderThreeColumn_select".
 */
export interface MediaImageHeaderThreeColumnSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCircleImageGrid_select".
 */
export interface MediaCircleImageGridSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaTextWithImageCluster_select".
 */
export interface MediaTextWithImageClusterSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaTwoListWithIllustration_select".
 */
export interface MediaTwoListWithIllustrationSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCardWithImage_select".
 */
export interface MediaCardWithImageSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaListWithIconAndDescription_select".
 */
export interface MediaListWithIconAndDescriptionSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaThreeDimensionCarousel_select".
 */
export interface MediaThreeDimensionCarouselSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaHero2_select".
 */
export interface MediaHero2Select<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaIconTextListWithImage_select".
 */
export interface MediaIconTextListWithImageSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}